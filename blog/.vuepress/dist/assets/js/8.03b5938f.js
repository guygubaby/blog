(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{269:function(a,s,t){"use strict";t.r(s);var e=t(38),n=Object(e.a)({},function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"从mongodb中导出导入数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从mongodb中导出导入数据","aria-hidden":"true"}},[a._v("#")]),a._v(" 从MongoDB中导出导入数据")]),a._v(" "),t("div",{staticClass:"warning custom-block"},[t("p",[a._v("Important info")])]),a._v(" "),t("p",[a._v("You need to stop app before importing MongoDB database with command:")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("docker stop xxx-app\n")])])]),t("ol",[t("li",[a._v("list docker containers")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("docker "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v("\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[a._v("enter inside docker container")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("docker "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" -it container-id "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v("\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[a._v("go to "),t("code",[a._v("/")]),a._v(" directory")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" /\n")])])]),t("ol",{attrs:{start:"4"}},[t("li",[a._v("backup the database to "),t("code",[a._v("/dump")]),a._v(" directory")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("mongodump -o /dump/\n")])])]),t("ol",{attrs:{start:"5"}},[t("li",[a._v("exit docker container")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exit")]),a._v("\n")])])]),t("ol",{attrs:{start:"6"}},[t("li",[a._v("copy the directory from container")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("docker "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" container-id:/dump "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n")])])]),t("ol",{attrs:{start:"7"}},[t("li",[a._v("restore the database from backup directory")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("docker "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" dump new-container-id:/data/\ndocker "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" -it new-container-id "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" /data\nmongorestore --drop --db dbname /data/dump/dbname/\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exit")]),a._v("\n")])])]),t("p",[a._v("ps: Backup and restore scripts")]),a._v(" "),t("ul",[t("li",[a._v("backup script")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("DATE")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("date")]),a._v(" +%Y-%m-%d-%H-%M"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("SCRIPTPATH")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"$( cd "'),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("dirname")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$0")]),a._v('"')]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v('"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("pwd")]),a._v(" -P "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"\ncd '),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$SCRIPTPATH")]),a._v("\nmkdir -p backups/"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$DATE")]),a._v("\ndocker ps -a | grep 'app-db' &> /dev/null\nif [ "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$?")]),a._v(' = 0 ]; then\n  docker exec -t app-db bash -c "')]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" -fr /dump "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" /dump "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" mongodump -o /dump/"),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"\n  docker cp app-db:/dump '),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$SCRIPTPATH")]),a._v("/backups/"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$DATE")]),a._v("\n  tar -zc -f backups/"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$DATE")]),a._v(".tgz -C "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$SCRIPTPATH")]),a._v("/backups/"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$DATE")]),a._v(" app\n  if [ -f backups/"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$DATE")]),a._v(".tgz ]; then\n    rm -fr backups/"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$DATE")]),a._v("\n    find "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$SCRIPTPATH")]),a._v('/backups/ -name "')]),a._v("*.tgz"),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('" -mtime +7 -delete\n  fi \nelse\n  echo "')]),a._v('app-db container is not running"\n  '),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exit")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("fi")]),a._v("\n")])])]),t("ul",[t("li",[a._v("restore script")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token shebang important"}},[a._v("#!/bin/bash")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$#")]),a._v(" -eq "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("then")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Supply a path to a tgz file!"')]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exit")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("fi")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("SCRIPTPATH")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"$( cd "'),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("dirname")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$0")]),a._v('"')]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v('"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("pwd")]),a._v(" -P "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"\nDATE='),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("date")]),a._v(" +%Y-%m-%d-%H-%M"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n\ndocker ps -a | grep 'app-db' &> /dev/null\nif [ "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$?")]),a._v(" = 0 ]; then\n\n  if [ -f "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$1")]),a._v(" ]; then\n    mkdir -p "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$SCRIPTPATH")]),a._v("/backups/"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$DATE")]),a._v("-restore\n    tar -zx -f "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$1")]),a._v(" -C "),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$SCRIPTPATH")]),a._v("/backups/"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$DATE")]),a._v('-restore\n    docker exec -t app-db bash -c "')]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" -fr /restore "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" /restore"),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"\n    docker cp '),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$SCRIPTPATH")]),a._v("/backups/"),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$DATE")]),a._v('-restore/app app-db:/restore\n    ## Only if you get errors about existing indexes, use this instead:\n    ## docker exec -t app-db bash -c "')]),a._v("mongorestore --drop --noIndexRestore --db app /restore/app/"),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"\n    docker exec -t app-db bash -c "')]),a._v("mongorestore --drop --db app /restore/app/"),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"\n  fi\nelse\n  echo "')]),a._v('app-db container is not running"\n  '),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exit")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("fi")]),a._v("\n")])])])])},[],!1,null,null,null);s.default=n.exports}}]);