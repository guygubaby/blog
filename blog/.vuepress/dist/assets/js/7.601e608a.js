(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{266:function(e,t,a){"use strict";a.r(t);var s=a(38),r=Object(s.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"从mongodb中导出导入数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从mongodb中导出导入数据","aria-hidden":"true"}},[e._v("#")]),e._v(" 从MongoDB中导出导入数据")]),e._v(" "),a("h2",{attrs:{id:"export-docker-mongo-data"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#export-docker-mongo-data","aria-hidden":"true"}},[e._v("#")]),e._v(" Export Docker Mongo Data")]),e._v(" "),a("div",{staticClass:"warning custom-block"},[a("p",[e._v("Important info")]),e._v(" "),a("p",[e._v("You need to stop app before importing MongoDB database with command:")]),e._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker stop xxx-app\n")])])])]),e._v(" "),a("ol",[a("li",[e._v("list docker containers")])]),e._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker ps\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("enter inside docker container")])]),e._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker exec -it container-id bash\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("go to "),a("code",[e._v("/")]),e._v(" directory")])]),e._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("cd /\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[e._v("backup the database to "),a("code",[e._v("/dump")]),e._v(" directory")])]),e._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("mongodump -o /dump/\n")])])]),a("ol",{attrs:{start:"5"}},[a("li",[e._v("exit docker container")])]),e._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("exit\n")])])]),a("ol",{attrs:{start:"6"}},[a("li",[e._v("copy the directory from container")])]),e._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker cp container-id:/dump .\n")])])]),a("ol",{attrs:{start:"7"}},[a("li",[e._v("restore the database from backup directory")])]),e._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker cp dump new-container-id:/data/\ndocker exec -it new-container-id bash\ncd /data\nmongorestore --drop --db dbname /data/dump/dbname/\nexit\n")])])]),a("p",[e._v("ps: Backup and restore scripts")]),e._v(" "),a("ul",[a("li",[e._v("backup script")])]),e._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('#!/bin/bash\nDATE=$(date +%Y-%m-%d-%H-%M)\nSCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"\ncd $SCRIPTPATH\nmkdir -p backups/$DATE\ndocker ps -a | grep \'app-db\' &> /dev/null\nif [ $? = 0 ]; then\n  docker exec -t app-db bash -c "rm -fr /dump ; mkdir /dump ; mongodump -o /dump/"\n  docker cp app-db:/dump $SCRIPTPATH/backups/$DATE\n  tar -zc -f backups/$DATE.tgz -C $SCRIPTPATH/backups/$DATE app\n  if [ -f backups/$DATE.tgz ]; then\n    rm -fr backups/$DATE\n    find $SCRIPTPATH/backups/ -name "*.tgz" -mtime +7 -delete\n  fi \nelse\n  echo "app-db container is not running"\n  exit 1\nfi\n')])])]),a("ul",[a("li",[e._v("restore script")])]),e._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('#!/bin/bash\nif [ $# -eq 0 ]\n  then\n    echo "Supply a path to a tgz file!"\n    exit 1\nfi\n\nSCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"\nDATE=$(date +%Y-%m-%d-%H-%M)\n\ndocker ps -a | grep \'app-db\' &> /dev/null\nif [ $? = 0 ]; then\n\n  if [ -f $1 ]; then\n    mkdir -p $SCRIPTPATH/backups/$DATE-restore\n    tar -zx -f $1 -C $SCRIPTPATH/backups/$DATE-restore\n    docker exec -t app-db bash -c "rm -fr /restore ; mkdir /restore"\n    docker cp $SCRIPTPATH/backups/$DATE-restore/app app-db:/restore\n    ## Only if you get errors about existing indexes, use this instead:\n    ## docker exec -t app-db bash -c "mongorestore --drop --noIndexRestore --db app /restore/app/"\n    docker exec -t app-db bash -c "mongorestore --drop --db app /restore/app/"\n  fi\nelse\n  echo "app-db container is not running"\n  exit 1\nfi\n')])])])])},[],!1,null,null,null);t.default=r.exports}}]);